#!/usr/bin/env php
<?php

/**
 * eZ Platform Bundles Mono Repo Project.
 *
 * @author    Novactive - SÃ©bastien Morel <s.morel@novactive.com> aka Plopix <morel.seb@gmail.com>
 * @copyright 2020 Novactive
 * @license   MIT
 */

declare(strict_types=1);

$configDir = "components/{$_SERVER['COMPONENT']}/tests/provisioning";
if (!file_exists($configDir)) {
    exit(0);
}
$appRootDir = __DIR__."/../ibexa";
$componentDir = __DIR__."/../components/".$_SERVER['COMPONENT'];

$bundleName = "nova_ez".strtolower($_SERVER['COMPONENT']);

/**
 * Add the to the list
 */
$bundleFile = "{$appRootDir}/config/bundles.php";
$bundleList = file_get_contents($bundleFile);
$bundles = array_map(
    function ($line) {
        $fqdn = trim(trim($line, "- "));

        return "{$fqdn}::class => [ 'all'=> true ],";
    },
    file($configDir."/bundles.yaml")
);

$bundleList = str_replace( '];', implode( PHP_EOL, $bundles) . PHP_EOL . '];', $bundleList);
file_put_contents($bundleFile, $bundleList);

/**
 * Inject the configurations
 */
if (file_exists($configDir."/configs.yaml") && trim(file_get_contents($configDir."/configs.yaml")) !== '') {
    $firstLine = substr(trim(file($configDir."/configs.yaml")[0]), 0, -1);
    if(strpos($firstLine, 'nova_') === 0) {
        $bundleName = $firstLine;
    }
    file_put_contents(
        "{$appRootDir}/config/packages/{$bundleName}.yaml",
        file_get_contents($configDir."/configs.yaml")
    );
}

/**
 * Inject the routes
 */
if (file_exists($configDir."/routes.yaml") && trim(file_get_contents($configDir."/routes.yaml")) !== '') {
    file_put_contents(
        "{$appRootDir}/config/routes/{$bundleName}.yaml",
        file_get_contents($configDir."/routes.yaml")
    );
}

/**
 * Trick Composer
 */

$composerJsonPath = "{$appRootDir}/composer.json";
$data = json_decode(file_get_contents($composerJsonPath), true, 512, JSON_THROW_ON_ERROR);
$bundleComposerJson = json_decode(file_get_contents("{$componentDir}/composer.json"), true, 512, JSON_THROW_ON_ERROR);

// re map paths, one directory before because composer create-project install in a dir
$psr4 = array_map(
    function ($item) use ($componentDir) {
        return "{$componentDir}/{$item}";
    },
    $bundleComposerJson["autoload"]['psr-4'] ?? []
);

$data["autoload"]['psr-4'] = array_merge($data["autoload"]['psr-4'], $psr4);
$data['require'] = ($data['require'] ?? []) + ($bundleComposerJson['require'] ?? []);
if( !empty( $bundleComposerJson['require-dev']) ) {
    $data['require-dev'] = ($data['require-dev'] ?? []) +  $bundleComposerJson['require-dev'];
}

// write the composer.json
file_put_contents(
    $composerJsonPath,
    json_encode($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT)
);

/**
 * Trick Yarn/NPM
 */

$bundlePackageJsonPath = "{$componentDir}/package.json";
if(file_exists($bundlePackageJsonPath)) {
    $packageJsonPath = "{$appRootDir}/package.json";
    $data = json_decode(file_get_contents($packageJsonPath), true);
    $bundlePackageJson = json_decode(file_get_contents($bundlePackageJsonPath), true);

    $data['devDependencies'] += $bundlePackageJson['dependencies'] ?? [];

    // write the composer.json
    file_put_contents(
        $packageJsonPath,
        json_encode($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT)
    );
}
